 #pragma once
#include "FESubzonePartitionerInterface.h"
#include "basicTypes.h"
#include "OrthogonalBisection.h"
namespace tecplot { namespace ___3931 { class ___37; class NoOpFESubzonePartitioner : public FESubzonePartitionerInterface { public: NoOpFESubzonePartitioner( ___37&                          ___36, ___4633                          zone, ItemAddress64::SectionOffset_t       section, OrthogonalBisection::BisectionType_e bisectionType) : m_baseIndex(bisectionSize(___36,zone,section,___36.___4617(zone+1),bisectionType).first) , m_numIndexes(bisectionSize(___36,zone,section,___36.___4617(zone+1),bisectionType).second) , m_itemAddress(ItemAddress64(0,0,0,0)) { } virtual ~NoOpFESubzonePartitioner() {} virtual ___81                     numIndexes() const { return m_numIndexes; } virtual ItemAddress64::SubzoneOffset_t numSubzones() const { return 0; } virtual ItemAddress64::ItemOffset_t    numItemsInSubzone(ItemAddress64::SubzoneOffset_t  ) const { ___476(___1303); return 0; } virtual ___81                     baseIndex() const { return m_baseIndex; } virtual ___81                     indexAtItemAddress(ItemAddress64 const&  ) const { ___476(___1303); return 0; } virtual ItemAddress64 const&           itemAddressAtIndex(___81  ) const { ___476(___1303); return m_itemAddress; } virtual void                           setItemAddressAtIndex(___81  , ItemAddress64 const& /*___2087*/) { ___476(___1303); } private: ___81 const    m_baseIndex; ___81 const    m_numIndexes; ItemAddress64 const m_itemAddress; }; }}

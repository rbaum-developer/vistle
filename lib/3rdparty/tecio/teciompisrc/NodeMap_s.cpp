#include "NodeMap_s.h"
namespace tecplot { namespace tecioszl { ___2728::___2728(int64_t maxNodeValue, int64_t cellCount, int32_t nodesPerCell) : m_maxNodeValue(maxNodeValue) { m_numCellsPerSection = std::vector<int64_t>(1, cellCount); m_numNodesPerCellPerSection = std::vector<int32_t>(1, nodesPerCell); } ___2728::___2728( int64_t maxNodeValue, std::vector<int64_t> const& numCellsPerSection, std::vector<int32_t> const& numNodesPerCellPerSection) : m_maxNodeValue(maxNodeValue) , m_numCellsPerSection(numCellsPerSection) , m_numNodesPerCellPerSection(numNodesPerCellPerSection) { } ___2728::~___2728() { } OffsetDataType_e ___2728::getRawItemType() const { return getRawItemTypeForMaxNodeValue(m_maxNodeValue); } int64_t ___2728::expectedValueCount() const { REQUIRE(m_numNodesPerCellPerSection.size() == m_numCellsPerSection.size()); int64_t numValues = 0; for (std::size_t section = 0; section < m_numCellsPerSection.size(); ++section) numValues += m_numCellsPerSection[section] * m_numNodesPerCellPerSection[section]; return numValues; } OffsetDataType_e ___2728::getRawItemTypeForMaxNodeValue(int64_t maxNodeValue) { if (maxNodeValue < std::numeric_limits<int32_t>::max()) return OffsetDataType_32Bit; else return OffsetDataType_64Bit; } ___2728::Ptr ___2728::makePtr( int64_t maxNodeValue, int64_t cellCount, int32_t nodesPerCell) { if (getRawItemTypeForMaxNodeValue(maxNodeValue) == OffsetDataType_32Bit) return boost::make_shared<TypedNodeMap<int32_t> >( maxNodeValue, cellCount, nodesPerCell); else return boost::make_shared<TypedNodeMap<int64_t> >( maxNodeValue, cellCount, nodesPerCell); } ___2728::Ptr ___2728::makePtr( int64_t maxNodeValue, std::vector<int64_t> const& numCellsPerSection, std::vector<int32_t> const& numNodesPerCellPerSection) { if (getRawItemTypeForMaxNodeValue(maxNodeValue) == OffsetDataType_32Bit) return boost::make_shared<TypedNodeMap<int32_t> >( maxNodeValue, numCellsPerSection, numNodesPerCellPerSection); else return boost::make_shared<TypedNodeMap<int64_t> >( maxNodeValue, numCellsPerSection, numNodesPerCellPerSection); } ___2728::Ptr ___2728::makePtr( tecplot::___3931::___1397& inputFile, bool readASCII) { int64_t maxNodeValue; std::vector<int64_t> numCellsPerSection; std::vector<int32_t> numNodesPerCellPerSection; tecplot::tecioszl::readScalar(inputFile, maxNodeValue, readASCII); tecplot::tecioszl::readVector(inputFile, numCellsPerSection, readASCII); tecplot::tecioszl::readVector(inputFile, numNodesPerCellPerSection, readASCII); Ptr ___3356 = makePtr( maxNodeValue, numCellsPerSection, numNodesPerCellPerSection); ___3356->readValuesFromFile(inputFile, readASCII); return ___3356; } }}

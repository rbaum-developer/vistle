#include "SZLFEZoneHeaderWriter.h"
#include "ThirdPartyHeadersBegin.h"
#include <boost/assign.hpp>
#include "ThirdPartyHeadersEnd.h"
#include "AltTecUtil.h"
#include "FEZoneInfo.h"
#include "fileStuff.h"
#include "ItemSetIterator.h"
#include "SzlFileLoader.h"
#include "writeValueArray.h"
namespace tecplot { namespace ___3931 { SZLFEZoneHeaderWriter::SZLFEZoneHeaderWriter( uint32_t                              fileVersion, ItemSetIterator&                      varIter, ___4633                           zone, ___4633                           ___341, ___37&                           ___36, ___1348 const&                     ___1347, bool                                  ___4496, ___1390 const&                   varFileLocs, FileLoc2DArray const&                 secCszConnectivityFileLocs, ___1390 const&                   ___2756, UInt32Array const&                    secNumCszs, ___2238<UInt16Array> const& secNumRefNodeSubzones, UInt16Array const&                    numRefCellSubzones, ___2238<UInt8Array> const&  secCszIncludesPartitionOffsetsBitArray, UInt8Array const&                     nszIncludesPartitionOffsetsBitArray) : ZoneHeaderWriterAbstract(fileVersion, varIter, zone, ___341, ___36) , m_feZoneInfo(___1347) , m_writeConnectivity(___4496) , ___2671(varFileLocs) , m_secCszConnectivityFileLocs(secCszConnectivityFileLocs) , m_nszConnectivityFileLocs(___2756) , m_secNumCszs(secNumCszs) , m_secNumRefNodeSubzones(secNumRefNodeSubzones) , m_numRefCellSubzones(numRefCellSubzones) , m_secCszIncludesPartitionOffsetsBitArray(secCszIncludesPartitionOffsetsBitArray) , m_nszIncludesPartitionOffsetsBitArray(nszIncludesPartitionOffsetsBitArray) {} SZLFEZoneHeaderWriter::~SZLFEZoneHeaderWriter() {} uint64_t SZLFEZoneHeaderWriter::sizeInFile(bool ___2000) const { uint64_t ___3356 = zoneHeaderTagsSizeInFile(9, ___2000); if (m_writeConnectivity) { ItemAddress64::SectionOffset_t const numSections = m_feZoneInfo.getNumSections(); for (ItemAddress64::SectionOffset_t section = 0; section < numSections; ++section) { ItemAddress64::SubzoneOffset_t numCszsInPartitionSection = m_feZoneInfo.numCszsInSection(section); if (numCszsInPartitionSection > 0) { ___3356 += arraySizeInFile<uint64_t, true /* ___2023 */>(numCszsInPartitionSection, ___2000); ___3356 += arraySizeInFile<uint16_t, false>(numCszsInPartitionSection, ___2000); ___3356 += arraySizeInFile<uint8_t, true /* ___2023 */>(numBytesForNumBits(numCszsInPartitionSection), ___2000); } } size_t const ___2821 = static_cast<size_t>(m_feZoneInfo.___2821()); ___3356 += arraySizeInFile<uint64_t, true /* ___2023 */>(___2821, ___2000); ___3356 += arraySizeInFile<uint16_t, false>(___2821, ___2000); ___3356 += arraySizeInFile<uint8_t, true /* ___2023 */>(numBytesForNumBits(___2821), ___2000); } size_t const numVarsToWrite = static_cast<size_t>(m_varIter.___2810()); ___3356 += arraySizeInFile<uint64_t, true /* ___2023 */>(numVarsToWrite, ___2000); size_t const numReferencedPartitions = static_cast<size_t>(m_feZoneInfo.getNumReferencedPartitions()); if (numReferencedPartitions > 0) ___3356 += arraySizeInFile<uint32_t, false>(numReferencedPartitions, ___2000); return ___3356;
} ___372 SZLFEZoneHeaderWriter::write(FileWriterInterface& fileWriter) const { REQUIRE(m_fileVersion == 105 || m_fileVersion == 231 || m_fileVersion == 232); REQUIRE(fileWriter.___2039()); ___4349 const numVarsToWrite = m_varIter.___2810(); REQUIRE(___2671.size() == uint64_t(numVarsToWrite)); REQUIRE(EQUIVALENCE(m_writeConnectivity, m_secCszConnectivityFileLocs.size() > 0)); REQUIRE(IMPLICATION(m_writeConnectivity, m_secCszConnectivityFileLocs.size() == static_cast<uint64_t>(m_feZoneInfo.getNumSections()))); REQUIRE(EQUIVALENCE(m_writeConnectivity, m_nszConnectivityFileLocs.size() > 0)); REQUIRE(IMPLICATION(m_writeConnectivity, m_nszConnectivityFileLocs.size() == static_cast<uint64_t>(m_feZoneInfo.___2821()))); ___372 ___2037 = ___4224; try { ___4633 const fileZone = ___2675 - m_baseZone; ItemAddress64::SectionOffset_t const numSections     = m_feZoneInfo.getNumSections(); ItemAddress64::SubzoneOffset_t const ___2821 = m_feZoneInfo.___2821(); ___3943 ___3942 = boost::assign::map_list_of<uint16_t, uint64_t> (___4339, ___330) (CSZ_CONNECT_FILE_LOC_TAG, ___330) (NSZ_CONNECT_FILE_LOC_TAG, ___330) (NUM_REF_PARTITIONS_TAG, uint64_t(m_feZoneInfo.getNumReferencedPartitions())) (REF_PARTITIONS_TAG, ___330) (NUM_REF_NODE_SUBZONES_TAG, ___330) (NUM_REF_CELL_SUBZONES_TAG, ___330) (CELL_SUBZONE_INCLUDES_PARTITIONS_TAG, ___330) (NODE_SUBZONE_INCLUDES_PARTITIONS_TAG, ___330); ___1391 headerFileLoc = fileWriter.fileLoc(); ___2037 = ___4562(fileWriter, ___3942); if (___2037 && m_writeConnectivity) { ___3942[CSZ_CONNECT_FILE_LOC_TAG] = fileWriter.fileLoc(); for (ItemAddress64::SectionOffset_t section = 0; ___2037 && section < numSections; ++section) { if (m_secNumCszs[section] > 0) ___2037 = ___4560<uint64_t, true, 0>(fileWriter, appendZoneSuffix(CSZ_CONNECT_FILE_LOC_DESCRIPTION).c_str(), fileZone, m_secNumCszs[section], m_secCszConnectivityFileLocs[section].data()); } } if (___2037 && m_writeConnectivity) { ___3942[NSZ_CONNECT_FILE_LOC_TAG] = fileWriter.fileLoc(); ___2037 = ___4560<uint64_t, true, 0>(fileWriter, appendZoneSuffix(NSZ_CONNECT_FILE_LOC_DESCRIPTION).c_str(), fileZone, ___2821, m_nszConnectivityFileLocs.data()); } if (___2037) { ___3942[___4339] = fileWriter.fileLoc(); ___2037 = ___4560<uint64_t, true, 0>(fileWriter, appendZoneSuffix(VAR_FILE_LOC_DESCRIPTION).c_str(), fileZone, numVarsToWrite, ___2671.data()); } if (___2037 && m_feZoneInfo.getNumReferencedPartitions() > 0) { ___3942[REF_PARTITIONS_TAG] = fileWriter.fileLoc(); ___2037 = ___4560<uint32_t, false, 0>(fileWriter, appendZoneSuffix(REF_PARTITIONS_DESCRIPTION).c_str(), fileZone, static_cast<size_t>(m_feZoneInfo.getNumReferencedPartitions()), m_feZoneInfo.getReferencedPartitions().data()); } if (___2037 && m_writeConnectivity) { ___3942[NUM_REF_NODE_SUBZONES_TAG] = fileWriter.fileLoc(); for (ItemAddress64::SectionOffset_t section = 0; ___2037 && section < numSections; ++section)
{ if (m_secNumCszs[section] > 0) ___2037 = ___4560<uint16_t, false, 0>(fileWriter, appendZoneSuffix(NUM_REF_NODE_SUBZONES_DESCRIPTION).c_str(), fileZone, m_secNumCszs[section], m_secNumRefNodeSubzones[section].data()); } } if (___2037 && m_writeConnectivity) { ___3942[NUM_REF_CELL_SUBZONES_TAG] = fileWriter.fileLoc(); ___2037 = ___4560<uint16_t, false, 0>(fileWriter, appendZoneSuffix(NUM_REF_CELL_SUBZONES_DESCRIPTION).c_str(), fileZone, ___2821, m_numRefCellSubzones.data()); } if (___2037 && m_writeConnectivity) { ___3942[CELL_SUBZONE_INCLUDES_PARTITIONS_TAG] = fileWriter.fileLoc(); for (ItemAddress64::SectionOffset_t section = 0; ___2037 && section < numSections; ++section) { if (m_secNumCszs[section] > 0) ___2037 = ___4560<uint8_t, true, 0>(fileWriter, appendZoneSuffix(CELL_SUBZONE_INCLUDES_PARTITIONS_DESCRIPTION).c_str(), fileZone, numBytesForNumBits(m_secNumCszs[section]), m_secCszIncludesPartitionOffsetsBitArray[section].data()); } } if (___2037 && m_writeConnectivity) { ___3942[NODE_SUBZONE_INCLUDES_PARTITIONS_TAG] = fileWriter.fileLoc(); ___2037 = ___4560<uint8_t, true, 0>(fileWriter, appendZoneSuffix(NODE_SUBZONE_INCLUDES_PARTITIONS_DESCRIPTION).c_str(), fileZone, numBytesForNumBits(___2821), m_nszIncludesPartitionOffsetsBitArray.data()); } ___1391 endFileLoc = fileWriter.fileLoc(); ___2037 = ___2037 && fileWriter.___3457(headerFileLoc) && ___4562(fileWriter, ___3942) && fileWriter.___3457(endFileLoc); } catch(std::bad_alloc const&) { ___2037 = ___1184("Out of memory while writing zone %d header.", ___2675 + 1); } catch(...) { ___2037 = ___1184("Unrecoverable error while writing zone %d header.", ___2675 + 1); } ENSURE(VALID_BOOLEAN(___2037)); return ___2037; } }}

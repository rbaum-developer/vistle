 #pragma once
#include "ThirdPartyHeadersBegin.h"
#include <map>
#include <vector>
#include <boost/unordered_set.hpp>
#include "ThirdPartyHeadersEnd.h"
#include "SZLOrderedPartitionedZoneHeaderWriter.h"
#include "IJKPartitionTree.h"
#include "IJKZoneInfo.h"
#include "PartitionTecUtilDecorator.h"
#include "ZoneWriterAbstract.h"
namespace tecplot { namespace ___3931 { class ___1350; class ZoneInfoCache; class ItemSetIterator; class SZLOrderedPartitionedZoneWriter : public ___4706 { public: SZLOrderedPartitionedZoneWriter( uint32_t                      fileVersion, ItemSetIterator&              varIter, ___4633                   zone, ___4633                   ___341, std::vector<___372> const& ___4561, ___372                     ___4496, ___37&                   ___36, ZoneInfoCache&                zoneInfoCache); virtual ~SZLOrderedPartitionedZoneWriter(); protected: typedef std::map<ItemAddress64::SubzoneOffset_t, std::vector<___2477> > SubzoneMinMaxMap; void applyCellMinMaxesToNeighborNodeSubzones( ItemAddress64::___2978 ___2975, std::vector<___1350> const& fieldDatas, std::vector<boost::shared_ptr<___1879> >& partitionInfos, ___1861 const& partitionTree); void getPartitionExtentsWithGhostNodes( ItemAddress64::___2978 ___2975, ___1842 &partitionMinIJK, ___1842 &partitionMaxIJK); void trimGhostNodes(___1842 &partitionMaxIJK); void getPartitionExtentsWithoutGhostNodes( ItemAddress64::___2978 ___2975, ___1842 &partitionMinIJK, ___1842 &partitionMaxIJK); void retrieveNodalFieldDataPtrsForPartition( ___37& partitionTecUtilDecorator, ItemAddress64::___2978 ___2975, std::vector<___1350> &nodalFieldDatas); void throwIfBadIntersectionRange( ___1853 const& intersectionRange, ItemAddress64::___2978 ___2975, ItemAddress64::___2978 neighborPartition); void getCellMinMaxes( std::vector<___2477>& cellMinMaxes, ___2225 ___460, ___1842 const& dimensions, std::vector<___1350> const& fieldDatas); virtual uint64_t zoneConnectivityFileSize(bool ___2000); virtual uint64_t zoneDataFileSize(bool ___2000); virtual uint64_t zoneHeaderFileSize(bool ___2000); virtual ___372 writeZoneConnectivity(FileWriterInterface& szpltFile); virtual ___372 writeZoneData(FileWriterInterface& szpltFile); virtual ___372 writeZoneHeader(FileWriterInterface& szpltFile); SZLOrderedPartitionedZoneHeaderWriter m_headerWriter; ZoneInfoCache& ___2678; PartitionTecUtilDecorator m_partitionTecUtil; ___2238<int32_t> m_partitionFileNums; UInt64Array m_partitionHeaderFilePositions; UInt64Array m_partitionMinNodeNumbers; UInt64Array m_partitionMaxNodeNumbers; VarZoneMinMaxArray m_varPartitionMinMaxes; std::map<___4633, boost::shared_ptr<___4706> > m_partitionWriters; private: void exchangeGhostInfo( std::vector<boost::shared_ptr<___1879> >& partitionInfos, std::vector<___1862> const& ___2979); void applyCellMinMaxesToNeighborsInRange( std::vector<___1862> const& neighborItems, ItemAddress64::___2978 ___2975, ___1853 const& partitionRange, ___1842 const& partitionOffsetIJK, ___1842 const& partitionDimensionsIJK, std::vector<___1350> const& fieldDatas, std::vector<boost::shared_ptr<___1879> >& partitionInfos); void createPartitionWriters();
}; }}

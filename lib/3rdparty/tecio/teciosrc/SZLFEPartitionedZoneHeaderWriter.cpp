#include "SZLFEPartitionedZoneHeaderWriter.h"
#include "ThirdPartyHeadersBegin.h"
#include <boost/assign.hpp>
#include "ThirdPartyHeadersEnd.h"
#include "AltTecUtil.h"
#include "ItemSetIterator.h"
#include "writeValueArray.h"
namespace tecplot { namespace ___3931 { SZLFEPartitionedZoneHeaderWriter::SZLFEPartitionedZoneHeaderWriter( uint32_t                             fileVersion, ItemSetIterator&                     varIter, ___4633                          zone, ___4633                          ___341, ___37&                          ___36, ___2238<int32_t> const&    partitionFileNums, UInt64Array const&                   partitionHeaderFilePositions, ___2238<Int64Array> const& secPtnNumCells, Int64Array const&                    partitionNumNodes, VarZoneMinMaxArray const&            varPartitionMinMaxes) : ZoneHeaderWriterAbstract(fileVersion, varIter, zone, ___341, ___36) , m_partitionFileNums(partitionFileNums) , m_partitionHeaderFilePositions(partitionHeaderFilePositions) , m_secPtnNumCells(secPtnNumCells) , m_partitionNumNodes(partitionNumNodes) , m_varPartitionMinMaxes(varPartitionMinMaxes) {} SZLFEPartitionedZoneHeaderWriter::~SZLFEPartitionedZoneHeaderWriter() {} uint64_t SZLFEPartitionedZoneHeaderWriter::sizeInFile(bool ___2000) const { uint64_t ___3356 = zoneHeaderTagsSizeInFile(6, ___2000); size_t numPartitions = static_cast<size_t>(___2335.zoneGetNumPartitions(___2675 + 1)); ___4262 const datasetID = ___2335.datasetGetUniqueID(); ___1170 numSections = 1; if (___2335.___4617(___2675 + 1) == ZoneType_FEMixed) { if (!___2335.zoneGetNumSections(datasetID, ___2675 + 1, &numSections)) throw std::runtime_error("failed to get zone section information"); } ___3356 += arraySizeInFile<int32_t, false>(numPartitions, ___2000); if (m_fileVersion < 232) { ___3356 += arraySizeInFile<uint32_t, false>(numSections*numPartitions, ___2000); ___3356 += arraySizeInFile<uint32_t, false>(numPartitions, ___2000); } else { ___3356 += arraySizeInFile<int64_t, false>(numSections*numPartitions, ___2000); ___3356 += arraySizeInFile<int64_t, false>(numPartitions, ___2000); } ___3356 += arraySizeInFile<uint64_t, true /* ___2023 */>(numPartitions, ___2000); m_varIter.reset(); while (m_varIter.hasNext()) { ___4349 const datasetVar = m_varIter.next(); FieldDataType_e ___1361 = const_cast<___37&>(___2335).___921(___2675 + 1, datasetVar + 1); switch (___1361) { case FieldDataType_Float: ___3356 += arraySizeInFile<std::pair<float, float>, false >(numPartitions, ___2000); break; case FieldDataType_Double: ___3356 += arraySizeInFile<std::pair<double, double>, false >(numPartitions, ___2000); break; case FieldDataType_Int32: ___3356 += arraySizeInFile<std::pair<int32_t, int32_t>, false >(numPartitions, ___2000); break; case FieldDataType_Int16: ___3356 += arraySizeInFile<std::pair<int16_t, int16_t>, false >(numPartitions, ___2000); break; case FieldDataType_Byte: case ___1363: ___3356 += arraySizeInFile<std::pair<uint8_t, uint8_t>, false >(numPartitions, ___2000); break; default: ___476(___1303); break; } } return ___3356; } ___372 SZLFEPartitionedZoneHeaderWriter::write(FileWriterInterface& fileWriter) const
{ REQUIRE(fileWriter.___2039()); ___4633 numPartitions = ___2335.zoneGetNumPartitions(___2675 + 1); ___372 ___2037 = ___4224; try { ___3943 ___3942 = boost::assign::map_list_of<uint16_t, uint64_t> (NUM_PARTITIONS_TAG, uint64_t(numPartitions)) (PARTITION_FILE_NUM_TAG, ___330) (PARTITION_FILE_LOC_TAG, ___330) (PARTITION_NUM_CELLS_TAG, ___330) (PARTITION_NUM_NODES_TAG, ___330) (VAR_PARTITION_MIN_MAX_TAG, ___330); ___1391 headerFileLoc = fileWriter.fileLoc(); ___2037 = ___4562(fileWriter, ___3942); ___4633 const fileZone = ___2675 - m_baseZone; if (___2037) { ___3942[PARTITION_FILE_NUM_TAG] = fileWriter.fileLoc(); ___2037 = ___4560<int32_t, false, 0>(fileWriter, appendZoneSuffix(PARTITION_FILE_NUM_DESCRIPTION).c_str(), fileZone, numPartitions, m_partitionFileNums.data()); } if (___2037) { ___3942[PARTITION_FILE_LOC_TAG] = fileWriter.fileLoc(); ___2037 = ___4560<uint64_t, true, 0>(fileWriter, appendZoneSuffix(PARTITION_FILE_LOC_DESCRIPTION).c_str(), fileZone, numPartitions, m_partitionHeaderFilePositions.data()); } if (___2037) { ___4262 const datasetID = ___2335.datasetGetUniqueID(); ___1170 numSections = 1; if (___2335.___4617(___2675 + 1) == ZoneType_FEMixed) { if (!___2335.zoneGetNumSections(datasetID, ___2675 + 1, &numSections)) throw std::runtime_error("failed to get zone section information"); } ___3942[PARTITION_NUM_CELLS_TAG] = fileWriter.fileLoc(); if (m_fileVersion < 232) { ___2238<___2238<uint32_t> > secPtnNumCells_uint32; ___2037 = secPtnNumCells_uint32.alloc(numSections); for (___1170 section = 0; ___2037 && section < numSections; ++section) { ___2037 = secPtnNumCells_uint32[section].alloc(numPartitions); for (___4633 ptn = 0; ___2037 && ptn < numPartitions; ++ptn) secPtnNumCells_uint32[section][ptn] = checked_numeric_cast<uint32_t>(m_secPtnNumCells[section][ptn]); ___2037 = ___4560<uint32_t, false, 0>(fileWriter, appendZoneSuffix(PARTITION_NUM_CELLS_DESCRIPTION).c_str(), fileZone, numPartitions, secPtnNumCells_uint32[section].data()); } } else { for (___1170 section = 0; ___2037 && section < numSections; ++section) { ___2037 = ___4560<int64_t, false, 0>(fileWriter, appendZoneSuffix(PARTITION_NUM_CELLS_DESCRIPTION).c_str(), fileZone, numPartitions, m_secPtnNumCells[section].data()); } } } if (___2037) { ___3942[PARTITION_NUM_NODES_TAG] = fileWriter.fileLoc(); if (m_fileVersion < 232) { ___2238<uint32_t> partitionNumNodes_uint32; ___2037 = partitionNumNodes_uint32.alloc(numPartitions); for (___4633 ptn = 0; ___2037 && ptn < numPartitions; ++ptn) partitionNumNodes_uint32[ptn] = checked_numeric_cast<uint32_t>(m_partitionNumNodes[ptn]); ___2037 = ___4560<uint32_t, false, 0>(fileWriter, appendZoneSuffix(PARTITION_NUM_NODES_DESCRIPTION).c_str(), fileZone, numPartitions, partitionNumNodes_uint32.data()); } else { ___2037 = ___4560<int64_t, false, 0>(fileWriter, appendZoneSuffix(PARTITION_NUM_NODES_DESCRIPTION).c_str(),
fileZone, numPartitions, m_partitionNumNodes.data()); } } if (___2037) { ___3942[VAR_PARTITION_MIN_MAX_TAG] = fileWriter.fileLoc(); m_varIter.reset(); ___4349 const baseVar = m_varIter.baseItem(); while (___2037 && m_varIter.hasNext()) { ___4349 const datasetVar = m_varIter.next(); ___4349 const fileVar = datasetVar - baseVar; FieldDataType_e ___1361 = const_cast<___37&>(___2335).___921(___2675 + 1, datasetVar + 1); switch (___1361) { case FieldDataType_Float: ___2037 = ___2037 && ___4525<float>(fileWriter, VAR_PARTITION_MIN_MAX_DESCRIPTION "ForVar", fileVar, numPartitions, &m_varPartitionMinMaxes[fileVar][0], ___944 / 2); break; case FieldDataType_Double: ___2037 = ___2037 && ___4525<double>(fileWriter, VAR_PARTITION_MIN_MAX_DESCRIPTION "ForVar", fileVar, numPartitions, &m_varPartitionMinMaxes[fileVar][0], ___944 / 2); break; case FieldDataType_Int32: ___2037 = ___2037 && ___4525<int32_t>(fileWriter, VAR_PARTITION_MIN_MAX_DESCRIPTION "ForVar", fileVar, numPartitions, &m_varPartitionMinMaxes[fileVar][0], ___944 / 2); break; case FieldDataType_Int16: ___2037 = ___2037 && ___4525<int16_t>(fileWriter, VAR_PARTITION_MIN_MAX_DESCRIPTION "ForVar", fileVar, numPartitions, &m_varPartitionMinMaxes[fileVar][0], ___944 / 2); break; case FieldDataType_Byte: case ___1363: ___2037 = ___2037 && ___4525<uint8_t>(fileWriter, VAR_PARTITION_MIN_MAX_DESCRIPTION "ForVar", fileVar, numPartitions, &m_varPartitionMinMaxes[fileVar][0], ___944 / 2); break; default: ___476(___1303); break; } } } ___1391 endFileLoc = fileWriter.fileLoc(); ___2037 = ___2037 && fileWriter.___3457(headerFileLoc) && ___4562(fileWriter, ___3942) && fileWriter.___3457(endFileLoc); } catch(std::bad_alloc const&) { ___2037 = ___1184("Out of memory while writing zone %d header.", ___2675 + 1); } catch(...) { ___2037 = ___1184("Unrecoverable error while writing zone %d header.", ___2675 + 1); } return ___4224; } }}

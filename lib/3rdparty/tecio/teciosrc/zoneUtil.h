 #pragma once
#include "AltTecUtil.h"
#include "basicTypes.h"
#include "IJK.h"
namespace tecplot { namespace ___3931 { inline int32_t ___2881(___1842 const& ___1841) { int32_t ___3356 = 0; ___2225 const dims[3] = {___1841.i(), ___1841.___2103(), ___1841.___2132()}; for (size_t i = 0; i < 3; ++i) if (dims[i] > 1) ++___3356; if (___3356 == 0) ___3356 = 1; return ___3356; } inline int32_t feMixedZoneDimension(FECellShape_e cellShape) { switch (cellShape) { case FECellShape_Bar:           return 1; case FECellShape_Triangle:      return 2; case FECellShape_Quadrilateral: return 2; case FECellShape_Tetrahedron:   return 3; case FECellShape_Hexahedron:    return 3; case FECellShape_Pyramid:       return 3; case FECellShape_Prism:         return 3; default: ___476(___1303);          return 0; } } inline int32_t feNonMixedZoneDimension(ZoneType_e ___4689) { switch (___4689) { case ___4693:    return 1; case ___4699:   return 2; case ___4697:       return 2; case ___4695:    return 2; case ___4698:      return 3; case ___4692:      return 3; case ___4696: return 3; default: ___476(___1303);      return 0; } } inline bool supportedOrderedVolumeZoneType( ZoneType_e ___4689, int32_t    ___1087) { return ___4689 == ___4701 && ___1087 == 3; } inline bool ___3892( ZoneType_e ___4689, int32_t    ___1087) { return ((___4689 == ___4698 || ___4689 == ___4692 || ___4689 == ZoneType_FEMixed) && ___1087 == 3); } inline bool ___3893( ZoneType_e ___4689, int32_t    ___1087) { return (supportedOrderedVolumeZoneType(___4689, ___1087) || ___3892(___4689, ___1087)); } inline bool supportedZoneType(ZoneType_e ___4689) { return (___4689 == ___4701    || ___4689 == ___4699 || ___4689 == ___4697     || ___4689 == ___4698    || ___4689 == ___4692    || ___4689 == ___4693  || ___4689 == ZoneType_FEMixed); } inline bool ___3156(ZoneType_e ___4689) { return ___4689 == ___4695 || ___4689 == ___4696; } inline ___372 ___4638(___37& ___36, ___4633 zone) { REQUIRE(zone >= 0); ZoneType_e ___4689 = ___36.___4617(zone+1); return ___4689==___4701; } inline ___372 ___4642(___37& ___36, ___4633 zone) { REQUIRE(zone >= 0); ZoneType_e ___4689 = ___36.___4617(zone+1); return ___4689==___4698; } inline ___372 ___4634(___37& ___36, ___4633 zone) { REQUIRE(zone >= 0); ZoneType_e ___4689 = ___36.___4617(zone+1); return ___4689==___4692; } inline ___372 ___4636(___37& ___36, ___4633 zone) { REQUIRE(zone >= 0); ZoneType_e ___4689 = ___36.___4617(zone+1); return ___4689==___4698 || ___4689==___4692; } inline ___372 ___4643(___37& ___36, ___4633 zone) { REQUIRE(zone >= 0); if (___4636(___36, zone)) { return ___4224; } else if (___4638(___36, zone))
{ ___1842 ___1841; ___36.___4612(zone + 1, ___1841); if (___1841.i() > 1 && ___1841.___2103() > 1 && ___1841.___2132() > 1) return ___4224; } return ___1303; } inline ___372 ___4640(___37& ___36, ___4633 zone) { REQUIRE(zone >= 0); return (___36.___4617(zone + 1) == ___4695 || ___36.___4617(zone + 1) == ___4696); } inline ___372 zoneIsPartitioned(___37& ___36, ___4633 zone) { REQUIRE(zone >= 0); return ___36.zoneIsPartitioned(zone + 1); } inline ___372 ___4641(___37& ___36, ___4633 zone) { REQUIRE(zone >= 0); return ___3892( ___36.___4617(zone + 1), ___36.zoneGetDimension(___36.datasetGetUniqueID(), zone + 1)); } inline ___372 ___4639(___37& ___36, ___4633 zone) { REQUIRE(zone >= 0); return ___4643(___36, zone) && ___4638(___36, zone); } }}

 #pragma once
#include "BitArray.h"
#include "SzlFileLoader.h"
static uint16_t const MAX_REFS_FOR_2_BIT_COMPRESSION = 4; static uint16_t const MAX_REFS_FOR_4_BIT_COMPRESSION = 1+0xF; static uint16_t const MAX_REFS_FOR_8_BIT_COMPRESSION = 1+0xFF; namespace tecplot { namespace ___3931 { template <typename ReferencedType, typename OffsetType> void gatherOffsets( ReferencedType const* references, uint64_t              numReferences, ReferencedType const* referencedItems, uint64_t              numReferencedItems, OffsetType*           offsets) { REQUIRE(numReferences > 0); REQUIRE(numReferencedItems > MAX_REFS_FOR_4_BIT_COMPRESSION); ReferencedType const* first = &referencedItems[0]; ReferencedType const* last = &referencedItems[numReferencedItems - 1] + 1; for(uint64_t i = 0; i < numReferences; ++i) { ReferencedType const reference = references[i]; ReferencedType const* current = std::lower_bound(first, last, reference); ___476(*current == reference); size_t const ___2863 = std::distance(first, current); ___476(___2863 <= (OffsetType)(-1)); offsets[i] = (OffsetType)(___2863); } } template <typename ReferencedType, typename OffsetType, size_t CompressedOffsetBitSize> size_t gatherCompressedOffsets( ReferencedType const* references, uint64_t              numReferences, ReferencedType const* referencedItems, uint64_t              numReferencedItems, uint8_t*              compressedOffsets) { REQUIRE(numReferences > 0); REQUIRE(numReferencedItems <= MAX_REFS_FOR_8_BIT_COMPRESSION); BitArray<OffsetType,CompressedOffsetBitSize> offsets(compressedOffsets, numReferences); ReferencedType const* first = &referencedItems[0]; ReferencedType const* last = &referencedItems[numReferencedItems - 1] + 1; for(uint64_t i = 0; i < numReferences; ++i) { ReferencedType const reference = references[i]; ReferencedType const* current = std::lower_bound(first, last, reference); ___476(*current == reference); size_t const ___2863 = std::distance(first, current); ___476(___2863 <= (uint8_t)(-1)); offsets[i] = checked_numeric_cast<OffsetType>(___2863); } return offsets.byteSize(); } }}

 #pragma once
#include "ThirdPartyHeadersBegin.h"
#include <map>
#include <vector>
#include <boost/unordered_set.hpp>
#include "ThirdPartyHeadersEnd.h"
#include "SZLFEPartitionedZoneHeaderWriter.h"
#include "ZoneWriterAbstract.h"
#include "PartitionTecUtilDecorator.h"
namespace tecplot { namespace ___3931 { class ___1348; class ___1350; class ___2722; class NodeToElemMap; class ZoneInfoCache; class ItemSetIterator; class SZLFEPartitionedZoneWriter : public ___4706 { public: SZLFEPartitionedZoneWriter( uint32_t                      fileVersion, ItemSetIterator&              varIter, ___4633                   zone, ___4633                   ___341, std::vector<___372> const& ___4561, ___372                     ___4496, ___37&                   ___36, ZoneInfoCache&                zoneInfoCache); virtual ~SZLFEPartitionedZoneWriter(); protected: struct NeighborCellSubzoneInfo { std::vector<___2716> m_nodes; std::vector<___2716> m_neighborNodes; std::vector<SubzoneAddressUnorderedSet> m_cellSubzones; std::vector<std::vector<___2477> > m_varMinMaxes; }; typedef std::map<ItemAddress64::___2978, NeighborCellSubzoneInfo> NeighborCellSubzoneInfoMap; void gatherNeighborCellSubzoneInfo(NeighborCellSubzoneInfoMap& neighborCellSubzoneInfoMap, ItemAddress64::___2978 ___2975, ___4349 ___2841, ___2722& ___2721, std::vector<___1350> const& fieldDatas, ___1348 const& zoneInfo); virtual uint64_t zoneConnectivityFileSize(bool ___2000); virtual uint64_t zoneDataFileSize(bool ___2000); virtual uint64_t zoneHeaderFileSize(bool ___2000); virtual ___372 writeZoneConnectivity(FileWriterInterface& szpltFile); virtual ___372 writeZoneData(FileWriterInterface& szpltFile); virtual ___372 writeZoneHeader(FileWriterInterface& szpltFile); SZLFEPartitionedZoneHeaderWriter m_headerWriter; ZoneInfoCache& ___2678; PartitionTecUtilDecorator m_partitionTecUtil; ___2238<int32_t> m_partitionFileNums; UInt64Array m_partitionHeaderFilePositions; ___2238<Int64Array> m_secPtnNumCells; Int64Array m_partitionNumNodes; VarZoneMinMaxArray m_varPartitionMinMaxes; std::map<___4633, boost::shared_ptr<___4706> > m_partitionWriters; private: void exchangeGhostInfo(std::vector<boost::shared_ptr<___1348> >& partitionInfos); void createPartitionWriters(); }; }}
